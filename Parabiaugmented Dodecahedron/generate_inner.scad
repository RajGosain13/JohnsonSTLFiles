// Auto-generated OpenSCAD file

    inner_points = 10*[[-1.3350698747901557, 0.0990218864340161, -0.41389441527673243], [0.8508637948042702, -0.9614534950051333, 0.5613942208431721], [-0.8508637948042702, 0.9614534950051333, -0.5613942208431721], [1.3350698747901557, -0.0990218864340161, 0.41389441527673243], [-0.07512626496626917, -0.194799963559733, -1.385617014211274], [0.7598260996660189, -0.5998655150369786, -1.013089904054999], [-0.7598260996660189, 0.5998655150369786, 1.013089904054999], [0.07512626496626917, 0.194799963559733, 1.385617014211274], [-0.5030679550992645, -1.280705233674586, -0.26503250471063], [0.7646000198631342, 0.9771700305368443, -0.6511920090175702], [-0.7646000198631342, -0.9771700305368443, 0.6511920090175702], [0.5030679550992645, 1.280705233674586, 0.26503250471063], [-0.8556377150013853, -0.6155820505686895, -0.9232921158806008], [0.4953435899607525, -1.2709918805305933, -0.3205305899169714], [-0.07217582002487244, 0.7798616050716232, -1.1619518146211012], [1.2788054849372654, 0.12445177510971961, -0.5591902886574719], [-1.2788054849372654, -0.12445177510971961, 0.5591902886574719], [0.07217582002487244, -0.7798616050716232, 1.1619518146211012], [-0.4953435899607525, 1.2709918805305933, 0.3205305899169714], [0.8556377150013853, 0.6155820505686895, 0.9232921158806008], [0.0443746617590165, -1.5516849543996245, 0.5267228692547999], [-0.0443746617590165, 1.5516849543996245, -0.5267228692547999]];

    outer_points = 10*[[0.6669622706403558, -0.020873051468661752, 1.2321733387908815], [-0.49050024063185305, 0.9496265660238541, -0.9061701775076568], [0.49050024063185305, -0.9496265660238541, 0.9061701775076568], [-0.6669622706403558, 0.020873051468661752, -1.2321733387908815], [1.372245669008736, -0.18534893390668453, -0.2147395821660355], [0.9301343304065605, 0.18534893390668453, -1.0315141257691125], [-0.9301343304065605, -0.18534893390668453, 1.0315141257691125], [-1.372245669008736, 0.18534893390668453, 0.2147395821660355], [0.6707072485223723, 1.215754134138207, 0.18873039942687714], [0.20872365623630781, -1.215754134138207, -0.6647569572525192], [-0.20872365623630781, 1.215754134138207, 0.6647569572525192], [-0.6707072485223723, -1.215754134138207, -0.18873039942687714], [1.2119109148021057, 0.4514765020210374, 0.5394130089910635], [0.4965597421320721, 1.0512782517001842, -0.782155963704398], [0.926389352524544, -1.0512782517001842, 0.011928813594892007], [0.21103817985451057, -0.4514765020210374, -1.3096401591005695], [-0.21103817985451057, 0.4514765020210374, 1.3096401591005695], [-0.926389352524544, 1.0512782517001842, -0.011928813594892007], [-0.4965597421320721, -1.0512782517001842, 0.782155963704398], [-1.2119109148021057, -0.4514765020210374, -0.5394130089910635], [-0.1349496014656266, 1.6145478368697694, -0.24931140534644022], [0.1349496014656266, -1.6145478368697694, 0.24931140534644022]];

    // Convex hull for inner set (I)
    module inner_hull() {
        hull() {
            for (p = inner_points) {
                translate(p) sphere(r=0.1);
            }
        }
    }

    // Convex hull for outer set (O) minus inner hull (O \ I)
    module outer_minus_inner() {
        difference() {
            hull() {
                for (p = outer_points) {
                    translate(p) sphere(r=0.1);
                }
            }
            inner_hull(); // Subtract inner hull
        }
    }

    // Convex hull for outer set (O) minus all translated inner hulls
    module outer_minus_AllTranslationInner() {
        difference() {
            hull() {
                for (p = outer_points) {
                    translate(p) sphere(r=0.1);
                }
            }
            hull() {
                translate([0,0,50]) inner_hull();
                translate([0,0,-50]) inner_hull();
            }; // Subtract translated inner hulls
        }
    }

    // Difference between outer_minus_inner and outer_minus_AllTranslationInner
    module outer_minus_inner_diff() {
        difference() {
            // Outer minus inner
            difference() {
                hull() {
                    for (p = outer_points) {
                        translate(p) sphere(r=0.1);
                    }
                }
                inner_hull();
            }

            // Subtract Outer minus AllTranslationInner
            difference() {
                hull() {
                    for (p = outer_points) {
                        translate(p) sphere(r=0.1);
                    }
                }
                hull() {
                    translate([0,0,50]) inner_hull();
                    translate([0,0,-50]) inner_hull();
                };
            }
        }
    }

    // Rendering all with colors applied
    color([1, 0, 0, 0.5]) inner_hull(); // Transparent red
    