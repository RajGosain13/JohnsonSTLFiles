// Auto-generated OpenSCAD file

    inner_points = 10*[[-0.8207364448332389, -0.03625987639799513, -1.077103005931804], [-0.3800079511582095, 0.6775294643132357, 1.0518242237897182], [1.314406218043804, -0.12649016604771388, -0.2591223940027388], [-1.2601675662397096, 0.3485174868667573, -0.26540930122634293], [0.6033917278936528, 0.4960926858162208, 1.0542256086650177], [0.7704376603984122, -0.3298307508154513, -1.0732174835834996], [-0.6659377447570157, -0.8939163933116565, -0.5867330828632719], [-0.5614003085180945, -0.3057984452791665, 1.03905571142295], [0.8614304919402382, -0.8720125870409337, 0.22976339159278825], [-1.105368866163486, -0.5091390300469038, 0.2249606218421892], [0.42199937053376757, -0.4872352237761812, 1.0414570962982492], [0.31746193429484665, -1.0753531718086713, -0.5843316979879724], [-0.3724387452492543, 0.6971415864952342, -0.5660731958680674], [0.17152981239613735, 0.9004821712629716, 0.24802189371269331], [0.6109609338026081, 0.5157048079982192, -0.5636718109927679], [-0.1143999812026689, -0.6709636863619204, -1.390535412940297], [-1.2648455927592903, 0.33639652876676684, 0.7345062944329209], [1.3097281915242232, -0.13861112414770457, 0.7407932016565248]];

    outer_points = 10*[[-0.7646716571891983, -0.4484124824111452, 1.017411015424149], [1.3334724658866113, -0.12832498152302135, 0.16218986970952987], [-0.4159593615000292, 1.137644887460793, -0.5946962179229037], [0.17664237883325157, -0.7784874133111438, 1.0879689744258578], [1.1071187428716376, 0.6035724304303223, -0.48053104208131747], [-1.1309196745075054, 0.7358224064074482, -0.022533265133765135], [-0.837148057149246, -0.8502349634644899, 0.10456608600351325], [0.8191262918806799, -0.7784874133111438, -0.39703890778391676], [-0.3485414671567439, 0.2834849295421984, -1.1103177785764728], [0.10416597887320383, -1.1803098943644885, 0.17512404500522194], [0.5927725688657061, -0.046590001357800344, -1.0397598195747642], [-1.06350178016422, -0.1183375515111464, -0.5381548257873341], [-0.00491846562418119, 0.20174994937697738, 1.009417255474962], [0.7100418473832949, 0.6035724304303223, 0.43725430268582344], [-0.23127218863915502, 0.9336473613303209, 0.3666963436841147], [-1.4605786756525627, -0.1183375515111464, 0.3796305189798069], [1.0038134647415542, -0.9824849394416157, 0.5643536538231018], [0.41121172440827325, 0.9336473613303209, -1.1183115385256597]];

    // Convex hull for inner set (I)
    module inner_hull() {
        hull() {
            for (p = inner_points) {
                translate(p) sphere(r=0.1);
            }
        }
    }

    // Convex hull for outer set (O) minus inner hull (O \ I)
    module outer_minus_inner() {
        difference() {
            hull() {
                for (p = outer_points) {
                    translate(p) sphere(r=0.1);
                }
            }
            inner_hull(); // Subtract inner hull
        }
    }

    // Convex hull for outer set (O) minus all translated inner hulls
    module outer_minus_AllTranslationInner() {
        difference() {
            hull() {
                for (p = outer_points) {
                    translate(p) sphere(r=0.1);
                }
            }
            hull() {
                translate([0,0,50]) inner_hull();
                translate([0,0,-50]) inner_hull();
            }; // Subtract translated inner hulls
        }
    }

    // Difference between outer_minus_inner and outer_minus_AllTranslationInner
    module outer_minus_inner_diff() {
        difference() {
            // Outer minus inner
            difference() {
                hull() {
                    for (p = outer_points) {
                        translate(p) sphere(r=0.1);
                    }
                }
                inner_hull();
            }

            // Subtract Outer minus AllTranslationInner
            difference() {
                hull() {
                    for (p = outer_points) {
                        translate(p) sphere(r=0.1);
                    }
                }
                hull() {
                    translate([0,0,50]) inner_hull();
                    translate([0,0,-50]) inner_hull();
                };
            }
        }
    }

    // Rendering all with colors applied
    color([0, 1, 0, 1]) outer_minus_AllTranslationInner(); // Opaque green
    