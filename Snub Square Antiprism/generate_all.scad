// Auto-generated OpenSCAD file

    inner_points = 10*[[-0.2885376862918134, 0.07175899174657377, -1.1783945441115085], [0.28853768640082145, 0.07175900040332306, 1.1783945428274933], [-1.1783945434149965, 0.0717589960423746, 0.28853768570430977], [1.1783945435240049, 0.07175899610752223, -0.28853768698832505], [-1.037277726864703, -0.29945504957306746, -0.6292238173151442], [0.6292238183363167, -0.2994550495270012, -1.0372777266018605], [-0.6292238175779867, -0.29945504345182133, 1.0372777278858758], [1.037277727623033, -0.299455043405755, 0.6292238185991594], [-0.16817179443109592, -0.7907165367613447, -0.6868174750759801], [0.16817179604873278, -0.7907165317158302, 0.6868174797585049], [-0.686817476608424, -0.7907165342575728, 0.16817179758117676], [0.6868174782260609, -0.7907165342196021, -0.16817179289865195], [-0.6045687129127788, 0.5630204820268412, -0.366737881241974], [0.36673787852556217, 0.5630204820536906, -0.604568714878892], [-0.366737879275861, 0.5630204855945586, 0.6045687101963672], [0.6045687121624802, 0.563020485621408, 0.3667378765594492]];

    outer_points = 10*[[-1.213205545812953, 0.07387883237032282, -0.17027003437574006], [1.2132055459196738, 0.07387883237032282, -0.17027003361533383], [-9.797521174090613e-11, 1.186835379548445, 0.3126330832175659], [2.0469611576138433e-10, -1.0390777148077994, -0.6531731512086397], [-0.8578658686155681, 0.7131002893052931, 0.5117341025641999], [-0.8578658684015472, -0.8608579540459387, -0.17119403511081444], [0.8578658682948263, 0.7131002893052931, 0.5117341031018883], [0.8578658685088472, -0.8608579540459387, -0.17119403457312604], [-0.7071067813811416, -0.2694200616443975, 0.6209378460253994], [0.7071067809919536, -0.2694200616443975, 0.6209378464685957], [-2.827987185956705e-10, 0.3792574228569266, 0.9023939193757089], [-1.0638924793604034e-10, -0.9180975461457217, 0.33948177311828626], [-0.49999999986777616, 0.7281043097383153, -0.42191834848824256], [-0.49999999974303583, -0.1892641864495203, -0.8199573443191398], [0.5000000001322238, 0.7281043097383153, -0.42191834817485535], [0.5000000002569641, -0.1892641864495203, -0.8199573440057525]];

    // Convex hull for inner set (I)
    module inner_hull() {
        hull() {
            for (p = inner_points) {
                translate(p) sphere(r=0.1);
            }
        }
    }

    // Convex hull for outer set (O) minus inner hull (O \ I)
    module outer_minus_inner() {
        difference() {
            hull() {
                for (p = outer_points) {
                    translate(p) sphere(r=0.1);
                }
            }
            inner_hull(); // Subtract inner hull
        }
    }

    // Convex hull for outer set (O) minus all translated inner hulls
    module outer_minus_AllTranslationInner() {
        difference() {
            hull() {
                for (p = outer_points) {
                    translate(p) sphere(r=0.1);
                }
            }
            hull() {
                translate([0,0,50]) inner_hull();
                translate([0,0,-50]) inner_hull();
            }; // Subtract translated inner hulls
        }
    }

    // Difference between outer_minus_inner and outer_minus_AllTranslationInner
    module outer_minus_inner_diff() {
        difference() {
            // Outer minus inner
            difference() {
                hull() {
                    for (p = outer_points) {
                        translate(p) sphere(r=0.1);
                    }
                }
                inner_hull();
            }

            // Subtract Outer minus AllTranslationInner
            difference() {
                hull() {
                    for (p = outer_points) {
                        translate(p) sphere(r=0.1);
                    }
                }
                hull() {
                    translate([0,0,50]) inner_hull();
                    translate([0,0,-50]) inner_hull();
                };
            }
        }
    }

    // Rendering all with colors applied
    color([1, 0, 0, 0.5]) inner_hull(); // Transparent red
    color([0, 1, 0, 1]) outer_minus_AllTranslationInner(); // Opaque green
    color([1, 1, 0, 1]) outer_minus_inner_diff(); // Opaque yellow
    