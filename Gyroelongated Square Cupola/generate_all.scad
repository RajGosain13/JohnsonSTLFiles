// Auto-generated OpenSCAD file

    inner_points = 10*[[-0.8272709439258851, 0.17250574680152558, -1.085356370379995], [-0.3000208722060624, -0.673824517218672, -1.1610692891914136], [0.7621572748828489, 1.018836010821184, 0.5227077285305861], [1.2894073466026714, 0.17250574680098618, 0.44699480971916755], [-0.7345602979402426, 1.0188360108215655, -0.5608281820767405], [0.53833397596794, -1.0243859908227981, -0.74361533751812], [-0.07619757329115358, 1.3693974844253103, 0.10525377685729254], [1.1966967006170288, -0.6738245172190535, -0.0775333785840871], [-1.0912605548199168, -0.6305363851239965, -0.5510972387851012], [0.6291241521432895, 0.2855248915222844, 1.189458799445929], [-0.9199536182758472, 0.9332780322219801, 0.41810447601210515], [0.4578172155992198, -1.278289525823692, 0.22025708464872243], [-1.326431597387023, 0.2855248915227826, -0.22624909246720426], [-0.3522004978329189, -1.2782895258234854, -0.36614832454032104], [-0.10993590484370842, 0.9332780322217736, 1.0045098852011487], [0.8642951947103956, -0.6305363851244946, 0.864610653128032], [0.018107748679271438, 0.7039670605239071, -1.1390568182894552], [0.5453578203990939, -0.14236320349629056, -1.2147697371008737], [0.6764704733283603, 1.054528534127652, -0.47297485935542216], [1.203720545048183, 0.20819827010745423, -0.5486877781668408]];

    outer_points = 10*[[0.8642951947101556, -0.6305363851244028, -0.8646106531284449], [0.6291241521429305, 0.28552489152246463, -1.1894587994460062], [-1.0912605548197898, -0.6305363851244028, 0.551097238785195], [-1.3264315973870149, 0.28552489152246463, 0.22624909246763364], [0.45781721559917127, -1.2782895258238085, -0.2202570846492242], [-0.10993590484404386, 0.9332780322218704, -1.0045098852008405], [-0.35220049783281543, -1.2782895258238085, 0.3661483245400292], [-0.9199536182760306, 0.9332780322218704, -0.41810447601158707], [1.2894073466025096, 0.17250574680096908, -0.4469948097194502], [-0.8272709439256501, 0.17250574680096908, 1.0853563703802613], [0.5383339759681318, -1.0243859908232005, 0.7436153375176736], [-0.0761975732912725, 1.3693974844251389, -0.1052537768568624], [1.1966967006170348, -0.6738245172192313, 0.07753337858357512], [0.7621572748826352, 1.0188360108211696, -0.5227077285304783], [-0.3000208722057758, -0.6738245172192313, 1.1610692891912895], [-0.7345602979401754, 1.0188360108211696, 0.5608281820772362], [-0.08831976886428294, -0.9141133036386847, -0.9746509296639724], [-0.323490811431508, 0.001947973008182724, -1.299499075981534], [-0.8983374822962696, -0.9141133036386847, -0.38824552047471894], [-1.1335085248634946, 0.001947973008182724, -0.7130936667922804]];

    // Convex hull for inner set (I)
    module inner_hull() {
        hull() {
            for (p = inner_points) {
                translate(p) sphere(r=0.1);
            }
        }
    }

    // Convex hull for outer set (O) minus inner hull (O \ I)
    module outer_minus_inner() {
        difference() {
            hull() {
                for (p = outer_points) {
                    translate(p) sphere(r=0.1);
                }
            }
            inner_hull(); // Subtract inner hull
        }
    }

    // Convex hull for outer set (O) minus all translated inner hulls
    module outer_minus_AllTranslationInner() {
        difference() {
            hull() {
                for (p = outer_points) {
                    translate(p) sphere(r=0.1);
                }
            }
            hull() {
                translate([0,0,50]) inner_hull();
                translate([0,0,-50]) inner_hull();
            }; // Subtract translated inner hulls
        }
    }

    // Difference between outer_minus_inner and outer_minus_AllTranslationInner
    module outer_minus_inner_diff() {
        difference() {
            // Outer minus inner
            difference() {
                hull() {
                    for (p = outer_points) {
                        translate(p) sphere(r=0.1);
                    }
                }
                inner_hull();
            }

            // Subtract Outer minus AllTranslationInner
            difference() {
                hull() {
                    for (p = outer_points) {
                        translate(p) sphere(r=0.1);
                    }
                }
                hull() {
                    translate([0,0,50]) inner_hull();
                    translate([0,0,-50]) inner_hull();
                };
            }
        }
    }

    // Rendering all with colors applied
    color([1, 0, 0, 0.5]) inner_hull(); // Transparent red
    color([0, 1, 0, 1]) outer_minus_AllTranslationInner(); // Opaque green
    color([1, 1, 0, 1]) outer_minus_inner_diff(); // Opaque yellow
    