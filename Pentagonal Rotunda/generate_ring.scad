// Auto-generated OpenSCAD file

    inner_points = 10*[[1.4127776500989453, -0.7887289142226223, 3.3946051633490118e-15], [-1.4127776500989453, 0.7887289142226223, -3.3946051633490118e-15], [7.699325831418754e-14, 1.448747966845947e-13, 1.618033988749895], [0.7887289142226223, 1.4127776500989453, -1.6402787932550622e-13], [1.3866917666528789, -0.20152279240725185, 0.8090169943748995], [1.386691766652802, -0.2015227924073968, -0.8090169943749954], [0.899230489753498, -1.0746673987146065, 0.809016994375001], [-0.8992304897534211, 1.0746673987147513, 0.8090169943748939], [-0.899230489753498, 1.0746673987146065, -0.809016994375001], [-1.386691766652802, 0.2015227924073968, 0.8090169943749954], [1.3444839206104982, 0.7485966710918835, 0.499999999999869], [1.3444839206104504, 0.7485966710917942, -0.500000000000131], [-0.06829372948844725, 1.5373255853145058, 0.49999999999986555], [-0.06829372948849499, 1.5373255853144165, -0.5000000000001343], [0.8309367602650506, 0.46265818659989943, 1.3090169943748666], [0.8309367602649261, 0.46265818659966507, -1.3090169943750283], [0.04220784604242839, -0.950119463499046, 1.3090169943750305], [-0.042207846042303876, 0.9501194634992803, 1.3090169943748644], [-0.04220784604242839, 0.950119463499046, -1.3090169943750305], [-0.8309367602649261, -0.46265818659966507, 1.3090169943750283]];

    outer_points = 10*[[1.51730962461505, 0.0, -0.5619657389916497], [-1.51730962461505, 0.0, 0.5619657389916497], [0.5173908766017687, 0.6315464316752465, 1.3969573272642983], [-0.2193448714004602, 1.4896922814420965, -0.592231983898246], [1.4184434174514022, 0.7761134471924181, 0.0608290828944803], [0.9010525408496336, 0.14456701551717166, -1.3361282443698181], [1.5540060032348615, -0.14456701551717166, 0.42684857816837674], [-1.0366151266330927, 0.7761134471924181, 0.9701087490959216], [-1.5540060032348615, 0.14456701551717166, -0.42684857816837674], [-0.9010525408496336, -0.14456701551717166, 1.3361282443698181], [0.7410836573200632, 1.4003449522003508, -0.3284250545406229], [0.4213185101110674, 1.0100277919513354, -1.1917921636231694], [-0.7762259672949867, 1.4003449522003508, 0.2335406844510268], [-1.0959911145039825, 1.0100277919513354, -0.6298264246315197], [0.7777800359398745, 1.2557779366831792, 0.6603892626194036], [-0.05937598787088977, 0.23391434475891726, -1.5999351737274412], [0.9971249073403348, -0.23391434475891726, 1.2526212465176494], [-0.15996888352957034, 1.2557779366831792, 1.0077031898291953], [-0.9971249073403348, 0.23391434475891726, -1.2526212465176494], [0.05937598787088977, -0.23391434475891726, 1.5999351737274412]];

    // Convex hull for inner set (I)
    module inner_hull() {
        hull() {
            for (p = inner_points) {
                translate(p) sphere(r=0.1);
            }
        }
    }

    // Convex hull for outer set (O) minus inner hull (O \ I)
    module outer_minus_inner() {
        difference() {
            hull() {
                for (p = outer_points) {
                    translate(p) sphere(r=0.1);
                }
            }
            inner_hull(); // Subtract inner hull
        }
    }

    // Convex hull for outer set (O) minus all translated inner hulls
    module outer_minus_AllTranslationInner() {
        difference() {
            hull() {
                for (p = outer_points) {
                    translate(p) sphere(r=0.1);
                }
            }
            hull() {
                translate([0,0,50]) inner_hull();
                translate([0,0,-50]) inner_hull();
            }; // Subtract translated inner hulls
        }
    }

    // Difference between outer_minus_inner and outer_minus_AllTranslationInner
    module outer_minus_inner_diff() {
        difference() {
            // Outer minus inner
            difference() {
                hull() {
                    for (p = outer_points) {
                        translate(p) sphere(r=0.1);
                    }
                }
                inner_hull();
            }

            // Subtract Outer minus AllTranslationInner
            difference() {
                hull() {
                    for (p = outer_points) {
                        translate(p) sphere(r=0.1);
                    }
                }
                hull() {
                    translate([0,0,50]) inner_hull();
                    translate([0,0,-50]) inner_hull();
                };
            }
        }
    }

    // Rendering all with colors applied
    color([0, 1, 0, 1]) outer_minus_AllTranslationInner(); // Opaque green
    