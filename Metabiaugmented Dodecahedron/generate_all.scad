// Auto-generated OpenSCAD file

    inner_points = 10*[[-0.4820813211250987, -1.0449238650604131, -0.5104799034334353], [-0.052587296473702555, 1.0049095944004596, 1.060449642253799], [0.3132765628671369, -0.7900923074517557, -1.060449642253799], [0.7427705875185331, 1.259741152009117, 0.5104799034334353], [0.8121529711437319, -1.026904669604844, 0.4604304395233323], [0.9762050905955799, -0.24393795936757026, 1.060472132044425], [-0.7155158242021455, 0.4587552463162742, -1.060472132044425], [-0.5514637047502975, 1.241721956553548, -0.4604304395233323], [-0.6190335754244582, -0.5099059922176972, 1.010386278888689], [1.4632403980874105, 0.15725168700784506, -0.4294531901269253], [-1.2025511316939763, 0.05756559994085883, 0.4294531901269253], [0.8797228418178926, 0.7247232791664011, -1.010386278888689], [-0.1737587446246939, -1.191281953827171, 0.4294756799175514], [0.09168316057485429, 0.07558479539642826, 1.400363533083693], [1.1131573448949394, -0.7789558322102864, -0.4603940502776995], [1.3785992500944875, 0.487910917013313, 0.5104938028884421], [-1.1179099837010533, -0.27309363006460907, -0.5104938028884421], [-0.8524680785015052, 0.9937731191589904, 0.4603940502776995], [0.16900610581858003, 0.13923249155227563, -1.400363533083693], [0.43444801101812824, 1.406099240775875, -0.4294756799175514], [-1.1201047009544618, -0.9226987816684733, 0.249774787956858], [1.0980326190753988, -0.212010675559726, -1.284010728119616]];

    outer_points = 10*[[0.3553738060072703, 1.340954088422547, 0.19767924096673445], [0.5163570327909294, -1.270590953937949, 0.28722732116012484], [-0.5163570327909294, 1.270590953937949, -0.28722732116012484], [-0.3553738060072703, -1.340954088422547, -0.19767924096673445], [-0.6670731664763409, 0.4987607215152127, 1.1268436558827821], [-0.6055830454636154, -0.4987607215152127, 1.161047978889356], [0.6055830454636154, 0.4987607215152127, -1.161047978889356], [0.6670731664763409, -0.4987607215152127, -1.1268436558827821], [0.8980547740238846, 0.09210653881782889, 1.071699351461188], [-1.3841661909912581, -0.09210653881782889, -0.19780250955479217], [1.3841661909912581, 0.09210653881782889, 0.19780250955479217], [-0.8980547740238846, -0.09210653881782889, -1.071699351461188], [0.26222611273671315, 0.863936771240565, 1.0716231672840233], [0.36171921850764677, -0.7500868280895054, 1.1269669244708398], [-1.1482640134802296, 0.7500868280895054, 0.28702786839490235], [-1.048770907709296, -0.863936771240565, 0.34237162558171885], [1.048770907709296, 0.863936771240565, -0.34237162558171885], [1.1482640134802296, -0.7500868280895054, -0.28702786839490235], [-0.36171921850764677, 0.7500868280895054, -1.1269669244708398], [-0.26222611273671315, -0.863936771240565, -1.0716231672840233], [1.162572789567373, 0.9577836380236123, 0.6466894935006993], [-1.2685575801393754, 0.7615511020849973, -0.7056442971472661]];

    // Convex hull for inner set (I)
    module inner_hull() {
        hull() {
            for (p = inner_points) {
                translate(p) sphere(r=0.1);
            }
        }
    }

    // Convex hull for outer set (O) minus inner hull (O \ I)
    module outer_minus_inner() {
        difference() {
            hull() {
                for (p = outer_points) {
                    translate(p) sphere(r=0.1);
                }
            }
            inner_hull(); // Subtract inner hull
        }
    }

    // Convex hull for outer set (O) minus all translated inner hulls
    module outer_minus_AllTranslationInner() {
        difference() {
            hull() {
                for (p = outer_points) {
                    translate(p) sphere(r=0.1);
                }
            }
            hull() {
                translate([0,0,50]) inner_hull();
                translate([0,0,-50]) inner_hull();
            }; // Subtract translated inner hulls
        }
    }

    // Difference between outer_minus_inner and outer_minus_AllTranslationInner
    module outer_minus_inner_diff() {
        difference() {
            // Outer minus inner
            difference() {
                hull() {
                    for (p = outer_points) {
                        translate(p) sphere(r=0.1);
                    }
                }
                inner_hull();
            }

            // Subtract Outer minus AllTranslationInner
            difference() {
                hull() {
                    for (p = outer_points) {
                        translate(p) sphere(r=0.1);
                    }
                }
                hull() {
                    translate([0,0,50]) inner_hull();
                    translate([0,0,-50]) inner_hull();
                };
            }
        }
    }

    // Rendering all with colors applied
    color([1, 0, 0, 0.5]) inner_hull(); // Transparent red
    color([0, 1, 0, 1]) outer_minus_AllTranslationInner(); // Opaque green
    color([1, 1, 0, 1]) outer_minus_inner_diff(); // Opaque yellow
    